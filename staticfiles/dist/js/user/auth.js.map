{"version":3,"names":[],"mappings":"","sources":["auth.js"],"sourcesContent":["import showNotification from \"./toast.js\";\nimport { env } from \"./env.js\";\n// ============ AUTH PAGE FUNCTIONALITY ============\n\n// Tab switching\nconst authTabs = document.querySelectorAll('.auth-tab');\nconst authContainers = document.querySelectorAll('.auth-form-container');\n\nauthTabs.forEach(tab => {\n    tab.addEventListener('click', () => {\n        const targetTab = tab.dataset.tab;\n        \n        // Remove active class from all tabs and containers\n        authTabs.forEach(t => t.classList.remove('active'));\n        authContainers.forEach(c => c.classList.remove('active'));\n        \n        // Add active class to clicked tab and corresponding container\n        tab.classList.add('active');\n        document.getElementById(targetTab + 'Tab').classList.add('active');\n    });\n});\n\n// Switch between login and register forms\nconst showRegisterBtn = document.getElementById('showRegister');\nconst showLoginBtn = document.getElementById('showLogin');\nconst loginForm = document.getElementById('loginForm');\nconst registerForm = document.getElementById('registerForm');\n\nif (showRegisterBtn) {\n    showRegisterBtn.addEventListener('click', () => {\n        loginForm.classList.remove('active');\n        registerForm.classList.add('active');\n    });\n}\n\nif (showLoginBtn) {\n    showLoginBtn.addEventListener('click', () => {\n        registerForm.classList.remove('active');\n        loginForm.classList.add('active');\n    });\n}\n\n// ============ USER LOGIN ============\nconst userLoginForm = document.getElementById('userLoginForm');\n\nif (userLoginForm) {\n    userLoginForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        const formData = new FormData(userLoginForm);\n        const username = formData.get('username');\n        const password = formData.get('password');\n        const remember = formData.get('remember');\n        \n        // Validate\n        if (!username || !password) {\n            showNotification('Please fill in all fields', 'error');\n            return;\n        }\n        \n        // Mock authentication\n        console.log('User Login:', { username, password, remember });\n        \n        // Save user data\n        const userData = {\n            type: 'user',\n            username: username,\n            loginTime: new Date().toISOString()\n        };\n        \n        if (remember) {\n            localStorage.setItem('user', JSON.stringify(userData));\n        } else {\n            sessionStorage.setItem('user', JSON.stringify(userData));\n        }\n        \n        showNotification('Login successful!', 'success');\n        \n        // Redirect after 1.5 seconds\n        setTimeout(() => {\n            window.location.href = 'index.html';\n        }, 1500);\n    });\n}\n\n// ============ USER REGISTRATION ============\nconst userRegisterForm = document.getElementById('userRegisterForm');\nconst regSubmitBtn = document.getElementById('reg-submit');\n\nif (userRegisterForm) {\n    userRegisterForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        const formData = new FormData(userRegisterForm);\n        const username = formData.get('username');\n        const email = formData.get('email');\n        const password = formData.get('password');\n        // const confirm = formData.get('confirm');\n        const terms = formData.get('terms');\n        \n        // Validate\n        if (!username || !email || !password) {\n            showNotification('Please fill in all fields', 'error');\n            return;\n        }\n        \n        if (password.length < 6) {\n            showNotification('Password must be at least 6 characters', 'error');\n            return;\n        }\n        \n        if (!terms) {\n            showNotification('Please accept the terms and conditions', 'error');\n            return;\n        }\n        \n        // Mock registration\n        console.log('User Registration:', { username, email, password });\n\n        // Disable submit button\n        regSubmitBtn.disabled = true;\n        regSubmitBtn.innerText = 'Registering...';\n        \n        const resp = fetch(`${env.apiBaseUrl}/api/register/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password\n            })\n        });\n\n        resp.then(res => {\n            if (res.status === 201) {\n                showNotification('Registration successful!', 'success');\n            } else {\n                showNotification('Registration failed. Please try again.', 'error');\n            }\n\n            // Disable submit button\n            regSubmitBtn.disabled = false;\n            regSubmitBtn.innerText = 'Create Account';\n\n            userRegisterForm.reset();\n        });\n\n        \n        // Switch to login form\n        // setTimeout(() => {\n        //     registerForm.classList.remove('active');\n        //     loginForm.classList.add('active');\n        //     userRegisterForm.reset();\n        // }, 1500);\n    });\n}\n\n// ============ ADMIN LOGIN ============\nconst adminLoginForm = document.getElementById('adminLoginForm');\n\nif (adminLoginForm) {\n    adminLoginForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        const formData = new FormData(adminLoginForm);\n        const email = formData.get('email');\n        const password = formData.get('password');\n        const remember = formData.get('remember');\n        \n        // Validate\n        if (!email || !password) {\n            showNotification('Please fill in all fields', 'error');\n            return;\n        }\n        \n        // Mock admin authentication (you should use proper backend authentication)\n        if (email === 'admin@electronic.com' && password === 'admin123') {\n            const adminData = {\n                type: 'admin',\n                email: email,\n                loginTime: new Date().toISOString()\n            };\n            \n            if (remember) {\n                localStorage.setItem('admin', JSON.stringify(adminData));\n            } else {\n                sessionStorage.setItem('admin', JSON.stringify(adminData));\n            }\n            \n            showNotification('Admin login successful!', 'success');\n            \n            setTimeout(() => {\n                window.location.href = `${env.apiBaseUrl}/crm/`;\n            }, 1500);\n        } else {\n            showNotification('Invalid admin credentials', 'error');\n        }\n    });\n}\n\n// ============ PASSWORD VISIBILITY TOGGLE ============\ndocument.querySelectorAll('input[type=\"password\"]').forEach(input => {\n    const wrapper = input.parentElement;\n    const toggleBtn = document.createElement('button');\n    toggleBtn.type = 'button';\n    toggleBtn.innerHTML = `<i data-lucide=\"eye-off\" class='h-8 w-8'></i>`;\n    toggleBtn.style.cssText = `\n        position: absolute;\n        right: 15px;\n        top: 69%;\n        transform: translateY(-50%);\n        background: none;\n        border: none;\n        cursor: pointer;\n        opacity: 0.6;\n    `;\n    \n    wrapper.style.position = 'relative';\n    wrapper.appendChild(toggleBtn);\n\n    lucide.createIcons();\n    \n    toggleBtn.addEventListener('click', () => {\n        if (input.type === 'password') {\n            input.type = 'text';\n            toggleBtn.innerHTML = `<i data-lucide=\"eye\" class='h-8 w-8'></i>`;\n        } else {\n            input.type = 'password';\n            toggleBtn.innerHTML = `<i data-lucide=\"eye-off\" class='h-8 w-8'></i>`;\n        }\n\n        lucide.createIcons();\n    });\n});\n"],"file":"auth.js"}