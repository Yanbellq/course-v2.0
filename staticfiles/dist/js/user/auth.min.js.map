{"version":3,"file":"auth.min.js","sources":["auth.js"],"sourcesContent":["import showNotification from \"./toast.js\";\nimport { env } from \"./env.js\";\n// ============ AUTH PAGE FUNCTIONALITY ============\n\n// Tab switching\nconst authTabs = document.querySelectorAll('.auth-tab');\nconst authContainers = document.querySelectorAll('.auth-form-container');\n\nauthTabs.forEach(tab => {\n    tab.addEventListener('click', () => {\n        const targetTab = tab.dataset.tab;\n        \n        // Remove active class from all tabs and containers\n        authTabs.forEach(t => t.classList.remove('active'));\n        authContainers.forEach(c => c.classList.remove('active'));\n        \n        // Add active class to clicked tab and corresponding container\n        tab.classList.add('active');\n        document.getElementById(targetTab + 'Tab').classList.add('active');\n    });\n});\n\n// Switch between login and register forms\nconst showRegisterBtn = document.getElementById('showRegister');\nconst showLoginBtn = document.getElementById('showLogin');\nconst loginForm = document.getElementById('loginForm');\nconst registerForm = document.getElementById('registerForm');\n\nif (showRegisterBtn) {\n    showRegisterBtn.addEventListener('click', () => {\n        loginForm.classList.remove('active');\n        registerForm.classList.add('active');\n    });\n}\n\nif (showLoginBtn) {\n    showLoginBtn.addEventListener('click', () => {\n        registerForm.classList.remove('active');\n        loginForm.classList.add('active');\n    });\n}\n\n// ============ USER LOGIN ============\nconst userLoginForm = document.getElementById('userLoginForm');\n\nif (userLoginForm) {\n    userLoginForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        const formData = new FormData(userLoginForm);\n        const username = formData.get('username');\n        const password = formData.get('password');\n        const remember = formData.get('remember');\n        \n        // Validate\n        if (!username || !password) {\n            showNotification('Please fill in all fields', 'error');\n            return;\n        }\n        \n        // Mock authentication\n        console.log('User Login:', { username, password, remember });\n        \n        // Save user data\n        const userData = {\n            type: 'user',\n            username: username,\n            loginTime: new Date().toISOString()\n        };\n        \n        if (remember) {\n            localStorage.setItem('user', JSON.stringify(userData));\n        } else {\n            sessionStorage.setItem('user', JSON.stringify(userData));\n        }\n        \n        showNotification('Login successful!', 'success');\n        \n        // Redirect after 1.5 seconds\n        setTimeout(() => {\n            window.location.href = 'index.html';\n        }, 1500);\n    });\n}\n\n// ============ USER REGISTRATION ============\nconst userRegisterForm = document.getElementById('userRegisterForm');\nconst regSubmitBtn = document.getElementById('reg-submit');\n\nif (userRegisterForm) {\n    userRegisterForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        const formData = new FormData(userRegisterForm);\n        const username = formData.get('username');\n        const email = formData.get('email');\n        const password = formData.get('password');\n        // const confirm = formData.get('confirm');\n        const terms = formData.get('terms');\n        \n        // Validate\n        if (!username || !email || !password) {\n            showNotification('Please fill in all fields', 'error');\n            return;\n        }\n        \n        if (password.length < 6) {\n            showNotification('Password must be at least 6 characters', 'error');\n            return;\n        }\n        \n        if (!terms) {\n            showNotification('Please accept the terms and conditions', 'error');\n            return;\n        }\n        \n        // Mock registration\n        console.log('User Registration:', { username, email, password });\n\n        // Disable submit button\n        regSubmitBtn.disabled = true;\n        regSubmitBtn.innerText = 'Registering...';\n        \n        const resp = fetch(`${env.apiBaseUrl}/api/register/`, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                username,\n                email,\n                password\n            })\n        });\n\n        resp.then(res => {\n            if (res.status === 201) {\n                showNotification('Registration successful!', 'success');\n            } else {\n                showNotification('Registration failed. Please try again.', 'error');\n            }\n\n            // Disable submit button\n            regSubmitBtn.disabled = false;\n            regSubmitBtn.innerText = 'Create Account';\n\n            userRegisterForm.reset();\n        });\n\n        \n        // Switch to login form\n        // setTimeout(() => {\n        //     registerForm.classList.remove('active');\n        //     loginForm.classList.add('active');\n        //     userRegisterForm.reset();\n        // }, 1500);\n    });\n}\n\n// ============ ADMIN LOGIN ============\nconst adminLoginForm = document.getElementById('adminLoginForm');\n\nif (adminLoginForm) {\n    adminLoginForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        \n        const formData = new FormData(adminLoginForm);\n        const email = formData.get('email');\n        const password = formData.get('password');\n        const remember = formData.get('remember');\n        \n        // Validate\n        if (!email || !password) {\n            showNotification('Please fill in all fields', 'error');\n            return;\n        }\n        \n        // Mock admin authentication (you should use proper backend authentication)\n        if (email === 'admin@electronic.com' && password === 'admin123') {\n            const adminData = {\n                type: 'admin',\n                email: email,\n                loginTime: new Date().toISOString()\n            };\n            \n            if (remember) {\n                localStorage.setItem('admin', JSON.stringify(adminData));\n            } else {\n                sessionStorage.setItem('admin', JSON.stringify(adminData));\n            }\n            \n            showNotification('Admin login successful!', 'success');\n            \n            setTimeout(() => {\n                window.location.href = `${env.apiBaseUrl}/crm/`;\n            }, 1500);\n        } else {\n            showNotification('Invalid admin credentials', 'error');\n        }\n    });\n}\n\n// ============ PASSWORD VISIBILITY TOGGLE ============\ndocument.querySelectorAll('input[type=\"password\"]').forEach(input => {\n    const wrapper = input.parentElement;\n    const toggleBtn = document.createElement('button');\n    toggleBtn.type = 'button';\n    toggleBtn.innerHTML = `<i data-lucide=\"eye-off\" class='h-8 w-8'></i>`;\n    toggleBtn.style.cssText = `\n        position: absolute;\n        right: 15px;\n        top: 69%;\n        transform: translateY(-50%);\n        background: none;\n        border: none;\n        cursor: pointer;\n        opacity: 0.6;\n    `;\n    \n    wrapper.style.position = 'relative';\n    wrapper.appendChild(toggleBtn);\n\n    lucide.createIcons();\n    \n    toggleBtn.addEventListener('click', () => {\n        if (input.type === 'password') {\n            input.type = 'text';\n            toggleBtn.innerHTML = `<i data-lucide=\"eye\" class='h-8 w-8'></i>`;\n        } else {\n            input.type = 'password';\n            toggleBtn.innerHTML = `<i data-lucide=\"eye-off\" class='h-8 w-8'></i>`;\n        }\n\n        lucide.createIcons();\n    });\n});\n"],"names":["showNotification","env","authTabs","document","querySelectorAll","authContainers","showRegisterBtn","forEach","tab","addEventListener","targetTab","dataset","t","classList","remove","c","add","getElementById","showLoginBtn","loginForm","registerForm","userLoginForm","userRegisterForm","e","preventDefault","formData","FormData","username","get","password","remember","console","log","userData","type","loginTime","Date","toISOString","localStorage","sessionStorage","setItem","JSON","stringify","setTimeout","window","location","href","regSubmitBtn","adminLoginForm","email","terms","length","disabled","innerText","fetch","apiBaseUrl","method","headers","Content-Type","body","then","res","status","reset","adminData","input","wrapper","parentElement","toggleBtn","createElement","innerHTML","style","cssText","position","appendChild","lucide","createIcons"],"mappings":"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"}